# -*- coding: utf-8 -*-
"""Mini-project-LEE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibjAIvk0qKtI_o1tN8EZSvWRz5sryZJi
"""

# ✅ 1. 필수 라이브러리 설치
!pip install streamlit pyngrok --quiet

# ✅ 2. ngrok 인증 토큰 등록 (👉 ngrok 가입 후 받은 토큰으로 교체하세요)
# 토큰은 https://dashboard.ngrok.com/get-started/your-authtoken 에서 확인 가능
!ngrok config add-authtoken 2yP4Gt799Muq4gpuqxZ48CS7DQm_2coEa2vioWcycKYcDjAh3

# ✅ 3. Streamlit 앱 코드 저장 (Met Museum API 연동)
code = """
import streamlit as st
import requests

st.set_page_config(page_title='🎨 예술 작품 탐색기', layout='wide')
st.title("🖼️ 메트로폴리탄 미술관 작품 탐색기")

object_id = st.number_input("🔎 작품 ID를 입력하세요", min_value=1, value=436535)

@st.cache_data
def get_artwork(object_id):
    url = f"https://collectionapi.metmuseum.org/public/collection/v1/objects/{object_id}"
    res = requests.get(url)
    return res.json() if res.status_code == 200 else {}

if st.button("작품 조회"):
    data = get_artwork(object_id)
    if data.get("objectID"):
        st.subheader(data.get("title", "제목 없음"))
        if data.get("primaryImageSmall"):
            st.image(data["primaryImageSmall"], caption=data.get("artistDisplayName", ""), use_column_width=True)
        info_md = f'''
- 👨‍🎨 작가: **{data.get("artistDisplayName", "정보 없음")}**
- 🕰 제작연도: **{data.get("objectDate", "미상")}**
- 🏛 부서: {data.get("department", "정보 없음")}
- 📝 설명: {data.get("creditLine", "정보 없음")}
'''
        st.markdown(info_md)
    else:
        st.error("해당 ID에 대한 정보를 찾을 수 없습니다.")
"""

# ✅ 4. 코드 파일로 저장
with open("app.py", "w") as f:
    f.write(code)

# ✅ 5. ngrok으로 포트 터널링 연결
from pyngrok import ngrok
public_url = ngrok.connect(8501)
print(f"🌐 여기를 클릭해서 Streamlit 앱 열기 👉 {public_url}")

# ✅ 6. Streamlit 앱 실행
!streamlit run app.py &> /dev/null &

# 필요한 패키지 설치
!pip install requests

# API 호출 함수 정의
import requests

# 작품 검색
def search_artworks(query):
    url = "https://collectionapi.metmuseum.org/public/collection/v1/search"
    params = {"q": query}
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json().get("objectIDs", [])

# 특정 objectID의 상세정보
def get_artwork_details(object_id):
    url = f"https://collectionapi.metmuseum.org/public/collection/v1/objects/{object_id}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()

# 테스트: "van Gogh" 검색
object_ids = search_artworks("van Gogh")
print(f"검색된 작품 수: {len(object_ids)}")
print(f"첫 5개 objectID: {object_ids[:5]}")

# 첫 번째 작품 상세정보 출력
if object_ids:
    details = get_artwork_details(object_ids[0])
    print("작품 제목:", details.get("title"))
    print("작가명:", details.get("artistDisplayName"))
    print("제작년도:", details.get("objectDate"))
    print("이미지 URL:", details.get("primaryImageSmall"))

# app.py
import streamlit as st
import requests

# API 함수
def search_artworks(query):
    url = "https://collectionapi.metmuseum.org/public/collection/v1/search"
    params = {"q": query}
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json().get("objectIDs", [])

def get_artwork_details(object_id):
    url = f"https://collectionapi.metmuseum.org/public/collection/v1/objects/{object_id}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()

# Streamlit UI 구성
st.title("🎨 The Met Art Explorer")

query = st.text_input("작품 키워드 입력 (예: van Gogh, Monet, Picasso)")

if query:
    object_ids = search_artworks(query)
    st.write(f"🔍 총 {len(object_ids)}개 작품 검색됨")

    if object_ids:
        for object_id in object_ids[:5]:  # 상위 5개만 표시
            details = get_artwork_details(object_id)
            st.subheader(details.get("title", "제목 없음"))
            if details.get("primaryImageSmall"):
                st.image(details["primaryImageSmall"], width=300)
            st.write(f"👨‍🎨 작가: {details.get('artistDisplayName', '정보 없음')}")
            st.write(f"🗓️ 제작년도: {details.get('objectDate', '정보 없음')}")
            st.write("---")
    else:
        st.write("❌ 검색 결과가 없습니다.")

import requests
import pandas as pd

# 1️⃣ Monet로 검색하기
search_url = "https://collectionapi.metmuseum.org/public/collection/v1/search"
params = {
    "q": "Monet",       # 검색 키워드
    "hasImages": True   # 이미지가 있는 작품만
}

response = requests.get(search_url, params=params)
data = response.json()

print(f"총 검색 결과 수: {data['total']} 개")
object_ids = data.get("objectIDs", [])[:10]  # 상위 10개만 가져오기

# 2️⃣ objectID별 상세 정보 가져오기
object_url = "https://collectionapi.metmuseum.org/public/collection/v1/objects/"

records = []
for obj_id in object_ids:
    obj_response = requests.get(f"{object_url}{obj_id}")
    obj_data = obj_response.json()

    records.append({
        "Title": obj_data.get("title"),
        "Artist": obj_data.get("artistDisplayName"),
        "Year": obj_data.get("objectDate"),
        "Department": obj_data.get("department"),
        "Medium": obj_data.get("medium"),
        "Image": obj_data.get("primaryImageSmall"),
    })

# 3️⃣ DataFrame으로 정리해서 보기
df = pd.DataFrame(records)
df

